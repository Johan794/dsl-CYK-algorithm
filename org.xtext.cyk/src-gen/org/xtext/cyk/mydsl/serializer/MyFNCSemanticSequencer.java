/*
 * generated by Xtext 2.27.0-SNAPSHOT
 */
package org.xtext.cyk.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.cyk.mydsl.myFNC.Binary;
import org.xtext.cyk.mydsl.myFNC.GNFC;
import org.xtext.cyk.mydsl.myFNC.Initial;
import org.xtext.cyk.mydsl.myFNC.InputString;
import org.xtext.cyk.mydsl.myFNC.Lambda;
import org.xtext.cyk.mydsl.myFNC.MyFNCPackage;
import org.xtext.cyk.mydsl.myFNC.NonTerminal;
import org.xtext.cyk.mydsl.myFNC.Production;
import org.xtext.cyk.mydsl.myFNC.Rigth;
import org.xtext.cyk.mydsl.myFNC.Simple;
import org.xtext.cyk.mydsl.services.MyFNCGrammarAccess;

@SuppressWarnings("all")
public class MyFNCSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyFNCGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyFNCPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyFNCPackage.BINARY:
				sequence_Binary(context, (Binary) semanticObject); 
				return; 
			case MyFNCPackage.GNFC:
				sequence_GNFC(context, (GNFC) semanticObject); 
				return; 
			case MyFNCPackage.INITIAL:
				sequence_Initial(context, (Initial) semanticObject); 
				return; 
			case MyFNCPackage.INPUT_STRING:
				sequence_InputString(context, (InputString) semanticObject); 
				return; 
			case MyFNCPackage.LAMBDA:
				sequence_Lambda(context, (Lambda) semanticObject); 
				return; 
			case MyFNCPackage.NON_TERMINAL:
				sequence_NonTerminal(context, (NonTerminal) semanticObject); 
				return; 
			case MyFNCPackage.PRODUCTION:
				sequence_Production(context, (Production) semanticObject); 
				return; 
			case MyFNCPackage.RIGTH:
				sequence_Rigth(context, (Rigth) semanticObject); 
				return; 
			case MyFNCPackage.SIMPLE:
				sequence_Simple(context, (Simple) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Binary returns Binary
	 *
	 * Constraint:
	 *     (first=NonTerminal second=NonTerminal)
	 * </pre>
	 */
	protected void sequence_Binary(ISerializationContext context, Binary semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyFNCPackage.Literals.BINARY__FIRST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyFNCPackage.Literals.BINARY__FIRST));
			if (transientValues.isValueTransient(semanticObject, MyFNCPackage.Literals.BINARY__SECOND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyFNCPackage.Literals.BINARY__SECOND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBinaryAccess().getFirstNonTerminalParserRuleCall_1_0_0(), semanticObject.getFirst());
		feeder.accept(grammarAccess.getBinaryAccess().getSecondNonTerminalParserRuleCall_1_1_0(), semanticObject.getSecond());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GNFC returns GNFC
	 *
	 * Constraint:
	 *     (init=Initial productions+=Production* final=InputString)
	 * </pre>
	 */
	protected void sequence_GNFC(ISerializationContext context, GNFC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Initial returns Initial
	 *
	 * Constraint:
	 *     (left='S' rigth+=Rigth rigth+=Rigth*)
	 * </pre>
	 */
	protected void sequence_Initial(ISerializationContext context, Initial semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     InputString returns InputString
	 *
	 * Constraint:
	 *     input=STRING
	 * </pre>
	 */
	protected void sequence_InputString(ISerializationContext context, InputString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyFNCPackage.Literals.INPUT_STRING__INPUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyFNCPackage.Literals.INPUT_STRING__INPUT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInputStringAccess().getInputSTRINGTerminalRuleCall_1_0(), semanticObject.getInput());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Lambda returns Lambda
	 *
	 * Constraint:
	 *     rigth='&'
	 * </pre>
	 */
	protected void sequence_Lambda(ISerializationContext context, Lambda semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyFNCPackage.Literals.LAMBDA__RIGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyFNCPackage.Literals.LAMBDA__RIGTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLambdaAccess().getRigthAmpersandKeyword_0_0(), semanticObject.getRigth());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NonTerminal returns NonTerminal
	 *
	 * Constraint:
	 *     (
	 *         var='A' | 
	 *         var='B' | 
	 *         var='C' | 
	 *         var='D' | 
	 *         var='E' | 
	 *         var='F' | 
	 *         var='G' | 
	 *         var='H' | 
	 *         var='I' | 
	 *         var='J' | 
	 *         var='K' | 
	 *         var='L' | 
	 *         var='M' | 
	 *         var='N' | 
	 *         var='O' | 
	 *         var='P' | 
	 *         var='Q' | 
	 *         var='R' | 
	 *         var='T' | 
	 *         var='U' | 
	 *         var='V' | 
	 *         var='W' | 
	 *         var='X' | 
	 *         var='Y' | 
	 *         var='Z'
	 *     )
	 * </pre>
	 */
	protected void sequence_NonTerminal(ISerializationContext context, NonTerminal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Production returns Production
	 *
	 * Constraint:
	 *     (left=NonTerminal rigth+=Rigth rigth+=Rigth*)
	 * </pre>
	 */
	protected void sequence_Production(ISerializationContext context, Production semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Lambda returns Rigth
	 *     Rigth returns Rigth
	 *
	 * Constraint:
	 *     (simple=Simple | binary=Binary)
	 * </pre>
	 */
	protected void sequence_Rigth(ISerializationContext context, Rigth semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Simple returns Simple
	 *
	 * Constraint:
	 *     (
	 *         alpha='a' | 
	 *         alpha='b' | 
	 *         alpha='c' | 
	 *         alpha='d' | 
	 *         alpha='e' | 
	 *         alpha='f' | 
	 *         alpha='g' | 
	 *         alpha='h' | 
	 *         alpha='i' | 
	 *         alpha='j' | 
	 *         alpha='k' | 
	 *         alpha='l' | 
	 *         alpha='m' | 
	 *         alpha='n' | 
	 *         alpha='o' | 
	 *         alpha='p' | 
	 *         alpha='q' | 
	 *         alpha='r' | 
	 *         alpha='s' | 
	 *         alpha='t' | 
	 *         alpha='v' | 
	 *         alpha='w' | 
	 *         alpha='x' | 
	 *         alpha='y' | 
	 *         alpha='z'
	 *     )
	 * </pre>
	 */
	protected void sequence_Simple(ISerializationContext context, Simple semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
